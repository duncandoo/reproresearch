calcAccuracy2 <- function(tableData)
{
wrong <- 0
right <- 0
for(i in 1:nrow(tableData))
{
for(j in 1:ncol(tableData))
{
if (i==j) {
right <- right + tableData[i,j]
} else {
wrong <- wrong + tableData[i,j]
}
}
}
total = right + wrong
ret <- list("right"=right, "wrong"=wrong, "accuracy"=round(right/total, digit=3))
return ret
}
list("right"=right, "wrong"=wrong, "accuracy"=round(right/total, digit=3))
calcAccuracy2 <- function(tableData)
{
wrong <- 0
right <- 0
for(i in 1:nrow(tableData))
{
for(j in 1:ncol(tableData))
{
if (i==j) {
right <- right + tableData[i,j]
} else {
wrong <- wrong + tableData[i,j]
}
}
}
total = right + wrong
ret <- list("right"=right, "wrong"=wrong, "accuracy"=round(right/total, digit=3))
return ret
}
list("right"=1, "wrong"=2, "accuracy"=3
)
calcAccuracy2 <- function(tableData)
{
wrong <- 0
right <- 0
for(i in 1:nrow(tableData))
{
for(j in 1:ncol(tableData))
{
if (i==j) {
right <- right + tableData[i,j]
} else {
wrong <- wrong + tableData[i,j]
}
}
}
total = right + wrong
accuracy<- round(right/total, digit=3)
ret <- list("right"=right, "wrong"=wrong, "accuracy"=accuracy)
return ret
}
calcAccuracy2 <- function(tableData)
{
wrong <- 0
right <- 0
for(i in 1:nrow(tableData))
{
for(j in 1:ncol(tableData))
{
if (i==j) {
right <- right + tableData[i,j]
} else {
wrong <- wrong + tableData[i,j]
}
}
}
total = right + wrong
accuracy<- round(right/total, digit=3)
ret <- list("right"=right, "wrong"=wrong, "accuracy"=accuracy)
return(ret)
}
rf <-calcAccuracy2(rfTestData)
rf
rf$accuracy
printAccuracy <- function(...)
{
library(data.table)
args <- list(...)
dt <- data.table(right=rep(0,length(args)), wrong=rep(0,length(args)), percent=rep(0,length(args)))
for(i in 1:length(args)) {
accList <- calcAccuracy2(a)
dt[i,right := accList$right]
dt[i,wrong := accList$wrong]
dt[i,accuracy := accList$accuracy]
}
xout <- xtable(dt,
caption="Accuracy Comparison.\\label{tab:overallAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="overallAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
}
printAccuracy(rfTrainData, rfTestData)
printAccuracy <- function(...)
{
library(data.table)
args <- list(...)
dt <- data.table(right=rep(0,length(args)), wrong=rep(0,length(args)), percent=rep(0,length(args)))
for(i in 1:length(args)) {
accList <- calcAccuracy2(args[i])
dt[i,right := accList$right]
dt[i,wrong := accList$wrong]
dt[i,accuracy := accList$accuracy]
}
xout <- xtable(dt,
caption="Accuracy Comparison.\\label{tab:overallAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="overallAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
}
printAccuracy(rfTrainData, rfTestData)
debug(printAccuracy)
printAccuracy(rfTrainData, rfTestData)
dt
i
args[i]
accList <- calcAccuracy2(args[i])
accList
nrow(args[i])
class(args[i])
class(args[[i])
class(args[[i]])
printAccuracy <- function(...)
{
library(data.table)
args <- list(...)
dt <- data.table(right=rep(0,length(args)), wrong=rep(0,length(args)), percent=rep(0,length(args)))
for(i in 1:length(args)) {
accList <- calcAccuracy2(args[[i]])
dt[i,right := accList$right]
dt[i,wrong := accList$wrong]
dt[i,accuracy := accList$accuracy]
}
xout <- xtable(dt,
caption="Accuracy Comparison.\\label{tab:overallAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="overallAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
}
printAccuracy(rfTrainData, rfTestData)
printAccuracy <- function(...)
{
library(data.table)
args <- list(...)
dt <- data.table(right=rep(0,length(args)), wrong=rep(0,length(args)), percent=rep(0,length(args)))
for(i in 1:length(args)) {
accList <- calcAccuracy2(args[[i]])
dt[i,right := accList$right]
dt[i,wrong := accList$wrong]
dt[i,accuracy := accList$accuracy]
}
xout <- xtable(dt,
caption="Accuracy Comparison.\\label{tab:overallAccuracy}")
align(xout) <- "|l|l|l|"
print(xout, file="overallAccuracy.tex")
}
printAccuracy(rfTrainData, rfTestData)
printAccuracy <- function(...)
{
library(data.table)
args <- list(...)
dt <- data.table(right=rep(0,length(args)), wrong=rep(0,length(args)), percent=rep(0,length(args)))
for(i in 1:length(args)) {
accList <- calcAccuracy2(args[[i]])
dt[i,right := accList$right]
dt[i,wrong := accList$wrong]
dt[i,accuracy := accList$accuracy]
}
xout <- xtable(dt,
caption="Accuracy Comparison.\\label{tab:overallAccuracy}")
align(xout) <- "|l|l|l|l|l|"
print(xout, file="overallAccuracy.tex")
}
printAccuracy(rfTrainData, rfTestData)
?dimnames
calcAccuracy2 <- function(tableData, label)
{
wrong <- 0
right <- 0
for(i in 1:nrow(tableData))
{
for(j in 1:ncol(tableData))
{
if (i==j) {
right <- right + tableData[i,j]
} else {
wrong <- wrong + tableData[i,j]
}
}
}
total = right + wrong
accuracy<- round(right/total, digit=3)
ret <- list("right"=right, "wrong"=wrong, "accuracy"=accuracy, "label"=label)
return(ret)
}
calcAccuracy2 <- function(tableData, label)
{
wrong <- 0
right <- 0
for(i in 1:nrow(tableData))
{
for(j in 1:ncol(tableData))
{
if (i==j) {
right <- right + tableData[i,j]
} else {
wrong <- wrong + tableData[i,j]
}
}
}
total = right + wrong
accuracy<- round(right/total, digit=3)
ret <- list("right"=right, "wrong"=wrong, "accuracy"=accuracy, "label"=label)
return(ret)
}
printAccuracy <- function(...)
{
library(data.table)
args <- list(...)
dt <- data.table(right=rep(0,length(args)),
wrong=rep(0,length(args)),
accuracy=rep(0,length(args)),
label=rep("", length(args)))
for(i in 1:length(args)) {
accList <- calcAccuracy2(args[[i]], "TODO")
dt[i,label := accList$label]
dt[i,right := accList$right]
dt[i,wrong := accList$wrong]
dt[i,accuracy := accList$accuracy]
}
xout <- xtable(dt,
caption="Testing Set Accuracy Comparison.\\label{tab:overallAccuracy}")
align(xout) <- "|l|l|l|l|l|"
print(xout, file="overallAccuracy.tex")
}
printAccuracy(rfTrainData, rfTestData)
calcAccuracy2 <- function(tableData, label)
{
wrong <- 0
right <- 0
for(i in 1:nrow(tableData))
{
for(j in 1:ncol(tableData))
{
if (i==j) {
right <- right + tableData[i,j]
} else {
wrong <- wrong + tableData[i,j]
}
}
}
total = right + wrong
accuracy<- round(right/total, digit=3)
ret <- list("right"=right, "wrong"=wrong, "accuracy"=accuracy, "label"=label)
return(ret)
}
printAccuracy(rfTrainData, rfTestData)
printAccuracy <- function(...)
{
library(data.table)
args <- list(...)
dt <- data.table(label=rep("", length(args)),
right=rep(0,length(args)),
wrong=rep(0,length(args)),
accuracy=rep(0,length(args)))
for(i in 1:length(args)) {
accList <- calcAccuracy2(args[[i]], "TODO")
dt[i,label := accList$label]
dt[i,right := accList$right]
dt[i,wrong := accList$wrong]
dt[i,accuracy := accList$accuracy]
}
xout <- xtable(dt,
caption="Testing Set Accuracy Comparison.\\label{tab:overallAccuracy}")
align(xout) <- "|l|l|l|l|l|"
print(xout, file="overallAccuracy.tex")
}
printAccuracy(rfTrainData, rfTestData)
?xtable
printAccuracy(treeTestData, svmTestData, rfTestData)
xout <- xtable(svmTrainData,
caption="SVM training set accuracy. Rows represent actual values. Columns are predicted values.\\label{tab:svmTrainAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="svmTrainAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
xout <- xtable(svmTestData,
caption="SVM testing set accuracy. Rows represent actual values. Columns are predicted values.\\label{tab:svmTestAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="svmTestAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
xout <- xtable(rfTrainData,
caption="Random forest testing set accuracy. Rows represent actual values. Columns are predicted values.\\label{tab:rfTrainAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="rfTrainAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
xout <- xtable(rfTestData,
caption="Random forest testing set accuracy. Rows represent actual values. Columns are predicted values.\\label{tab:rfTestAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="rfTestAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
plot(fit)
testAccuracy <- data.frame(actual=testDF$activity, predicted=predict(prunedTree, type="class", newdata=testDF))
treeTestData <- table(testAccuracy)
calcAccuracy(treeTestData)
xout <- xtable(table(treeTrainAccuracy),
caption="Tree testing set accuracy. Rows represent actual values. Columns are predicted values.\\label{tab:treeTestAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="treeTestAccuracy.tex",
#      table.placement="H",
tabular.environment="tabularx", width="\\textwidth")
treeTrainAccuracy <- data.frame(actual=trainDF$activity, predicted=predict(prunedTree, type="class"))
#check prediction accuracy
#on the trainin DF
treeTrainData <- table(trainAccuracy)
calcAccuracy(treeTrainData)
xout <- xtable(table(treeTrainAccuracy), table.placement="!h",
caption="Tree training set accuracy. Rows represent actual values. Columns are predicted values.\\label{tab:treeTrainAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="treeTrainAccuracy.tex",
#      table.placement="H",
tabular.environment="tabularx", width="\\textwidth")
#on the testing DF
treeTestAccuracy <- data.frame(actual=testDF$activity, predicted=predict(prunedTree, type="class", newdata=testDF))
treeTestData <- table(testAccuracy)
calcAccuracy(treeTestData)
xout <- xtable(table(treeTrainAccuracy),
caption="Tree testing set accuracy. Rows represent actual values. Columns are predicted values.\\label{tab:treeTestAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="treeTestAccuracy.tex",
#      table.placement="H",
tabular.environment="tabularx", width="\\textwidth")
#lots of misclassifications walking up and down
xout <- xtable(table(treeTestAccuracy),
caption="Tree testing set accuracy. Rows represent actual values. Columns are predicted values.\\label{tab:treeTestAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="treeTestAccuracy.tex",
#      table.placement="H",
tabular.environment="tabularx", width="\\textwidth")
#lots of misclassifications walking up and down
xout <- xtable(rfTrainData,
caption="Random forest testing set accuracy. Misclassifications are off of the diagonals.\\label{tab:rfTrainAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="rfTrainAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
xout <- xtable(rfTestData,
caption="Random forest testing set accuracy. Misclassifications are off of the diagonals.\\label{tab:rfTestAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="rfTestAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
xout <- xtable(table(treeTrainAccuracy), table.placement="!h",
caption="Tree training set accuracy. Misclassifications are off of the diagonal.\\label{tab:treeTrainAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="treeTrainAccuracy.tex",
#      table.placement="H",
tabular.environment="tabularx", width="\\textwidth")
#on the testing DF
treeTestAccuracy <- data.frame(actual=testDF$activity, predicted=predict(prunedTree, type="class", newdata=testDF))
treeTestData <- table(testAccuracy)
calcAccuracy(treeTestData)
xout <- xtable(table(treeTestAccuracy),
caption="Tree testing set accuracy. Misclassifications are off of the diagonal.\\label{tab:treeTestAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="treeTestAccuracy.tex",
#      table.placement="H",
tabular.environment="tabularx", width="\\textwidth")
#lots of misclassifications walking up and down
xout <- xtable(svmTrainData,
caption="SVM training set accuracy. Rows represent actual values. Columns are predicted values.\\label{tab:svmTrainAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="svmTrainAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
# Testing set predictions
testPredicted <- predict(fit, testDF)
svmTestData<- table(testPredicted, testDF$activity) # not too bad
calcAccuracy(svmTestData)
xout <- xtable(svmTestData,
caption="SVM testing set accuracy. Rows represent actual values. Columns are predicted values.\\label{tab:svmTestAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="svmTestAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
xout <- xtable(svmTrainData,
caption="SVM training set accuracy. Misclassifications are off of the diagonal.\\label{tab:svmTrainAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="svmTrainAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
# Testing set predictions
testPredicted <- predict(fit, testDF)
svmTestData<- table(testPredicted, testDF$activity) # not too bad
calcAccuracy(svmTestData)
xout <- xtable(svmTestData,
caption="SVM testing set accuracy. Misclassifications are off of the diagonal.\\label{tab:svmTestAccuracy}")
align(xout) <- "|l|X|X|l|X|X|X|"
print(xout, file="svmTestAccuracy.tex", tabular.environment="tabularx", width="\\textwidth")
2013-1936
1/8
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
pValues
pValues > .1
sum(pValues > .1)
View(samsungData)
rm(list=ls())
albumData <- read.delim("data/AlbumSales2.dat")
head(albumData)
library(ggplot)
library(ggplot2)
library(xtable)
View(albumData)
ggplot(albumData, aes(adverts, sales)) + geom_point()
ggsave(scatter, filename="figures/scatter.pdf", width=6, height=4)
scatter <- ggplot(albumData, aes(adverts, sales)) + geom_point()
ggsave(scatter, filename="figures/scatter.pdf", width=6, height=4)
table(albumData)
stat.desc(albumData)
??stat.desc
library(pastecs)
table(stat.desc(albumData))
yes <- rbinom(100, 1 .5)
yes <- rbinom(100, 1, .5)
set.seed(4189)
yes <- rbinom(100, 1, .5)
set.seed(41892)
dog <- rbinon(100, 1, .5)
dog <- rbinom(100, 1, .5)
set.seed(4189)
yes <- rbinom(100, 1, .5)
set.seed(41892)
dog <- rbinom(100, 1, .5)
Training <- c(rep(0, 38), rep(1, 162))
Dance <- c(rep(0, 28), rep(1, 10), rep(0, 48), rep(1, 114))
Training <- factor(Training, labels = c("Food as Reward", "Affection as Reward"))
Dance <- factor(Dance, labels = c("Yes", "No"))
catsData <- data.frame(Training, Dance)
head(catsData)
table(catsData)
xout <- xtable(table(catsData),
caption="Pets and Dancing.\\label{tab:petDancing}")
align(xout) <- "|l|l|l|"
print(xout, file="petDancing.tex")
p <- lm(sales ~ adverts, data=albumData)
model <- lm(sales ~ adverts, data=albumData)
model$effects
summary(model)
summ <- summary(model)
summ$fstatistic
summ
summ$coefficients
summ$coefficients[[2]]
summ$coefficients[[8]]
p <- summ$coefficients[[8]]
p
round(p, digits=3)
round(p, digits=12)
round(p, digits=19)
round(p, digits=18)
round(p, digits=20)
p <- 3.141
fileConn<-file("p.tex")
writeLines(p, fileConn)
writeLines(as.character(p), fileConn)
close(fileConn)
Animal <- c(rep(0, 42), rep(1, 48))
Color <- c(rep(0, 24), rep(1, 14), rep(2, 40), rep(3, 122))
Animal <- factor(Animal, labels = c("Dog", "Cat"))
Color <- factor(Color, labels = c("Black", "Brown", "Yellow", "Gray"))
catsData <- data.frame(Animal, Color)
Animal <- c(rep(0, 42), rep(1, 48))
Color <- c(rep(0, 15), rep(1, 20), rep(2, 30), rep(3, 25))
Animal <- factor(Animal, labels = c("Dog", "Cat"))
Color <- factor(Color, labels = c("Black", "Brown", "Yellow", "Gray"))
catsData <- data.frame(Animal, Color)
head(catsData)
catsData
catsData$Height <- rnorm(90, 15, 10)
catsData$Weight <- rnorm(90, 18, 8)
catsData
write.table(catsData, file="data/animals.csv")
animalData <- read.csv("data/animals.csv")
animalData
animalData <- read.table("data/animals.csv")
animalData
Animal <- c(rep(0, 42), rep(1, 48))
Color <- c(rep(0, 15), rep(1, 20), rep(2, 30), rep(3, 25))
Animal <- factor(Animal, labels = c("Dog", "Cat"))
Color <- factor(Color, labels = c("Block", "Brown", "Yellow", "Gray"))
animalData <- data.frame(Animal, Color)
animalData$Height <- rnorm(90, 15, 10)
animalData$Weight <- rnorm(90, 18, 8)
write.table(animalData, file="data/animals.csv")
rawAnimalData <- read.table("data/animals.csv")
animalData <- rawAnimalData
names(animalData$Color)
animalData$Color
levels(animalData$Color)[1]
levels(animalData$Color)[1] <- "Black"
animalData$Color
scatter <- ggplot(animalData, aes(weight, height)) + geom_point()
library(ggplot2)
scatter <- ggplot(animalData, aes(weight, height)) + geom_point()
ggsave(scatter, filename="figures/scatter.pdf", width=6, height=4)
scatter <- ggplot(animalData, aes(Weight, Height)) + geom_point()
ggsave(scatter, filename="figures/scatter.pdf", width=6, height=4)
library(xtable)
table(catsData$Animal, catsData$Color)
library(xtable)
xout <- xtable(table(catsData$Animal, catsData$Color),
caption="Pets and Color.\\label{tab:petColor}")
align(xout) <- "|l|l|l|l|l|"
print(xout, file="petColor.tex")
